{"version":3,"sources":["../src/utils.ts"],"names":["doesFileExist","absFilePath","Promise","resolve","fs","exists","handlerToFileDetails","serviceRoot","handler","lastDotIndex","lastIndexOf","Error","fileNameWithoutExt","substring","tsFileName","tsFilePath","path","join","tsFileExists","name","absPath","jsFileName","jsFilePath"],"mappings":";;;;;;;;AAAA;;AACA;;;;;;;;AAGO,SAASA,aAAT,CAAuBC,WAAvB,EAA8D;AACnE,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5BC,gBAAGC,MAAH,CAAUJ,WAAV,EAAuBE,OAAvB;AACD,GAFM,CAAP;AAGD;AAED;;;;;;;;;SAOsBG,oB;;;;;4CAAf,WACLC,WADK,EAELC,OAFK,EAGsB;AAC3B,UAAMC,YAAY,GAAGD,OAAO,CAACE,WAAR,CAAoB,GAApB,CAArB;AACA,QAAI,CAACD,YAAL,EAAmB,MAAM,IAAIE,KAAJ,CAAU,sBAAV,CAAN;AACnB,UAAMC,kBAAkB,GAAGJ,OAAO,CAACK,SAAR,CAAkB,CAAlB,EAAqBJ,YAArB,CAA3B;AAEA,UAAMK,UAAU,GAAI,GAAEF,kBAAmB,KAAzC;;AACA,UAAMG,UAAU,GAAGC,cAAKC,IAAL,CAAUV,WAAV,EAAuBO,UAAvB,CAAnB;;AACA,UAAMI,YAAY,SAASlB,aAAa,CAACe,UAAD,CAAxC;AACA,QAAIG,YAAJ,EAAkB,OAAO;AAAEC,MAAAA,IAAI,EAAEL,UAAR;AAAoBM,MAAAA,OAAO,EAAEL;AAA7B,KAAP;AAElB,UAAMM,UAAU,GAAI,GAAET,kBAAmB,KAAzC;;AACA,UAAMU,UAAU,GAAGN,cAAKC,IAAL,CAAUV,WAAV,EAAuBc,UAAvB,CAAnB;;AACA,WAAO;AAAEF,MAAAA,IAAI,EAAEE,UAAR;AAAoBD,MAAAA,OAAO,EAAEE;AAA7B,KAAP;AACD,G","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport { IFileNameAndPath } from './types';\n\nexport function doesFileExist(absFilePath: string): Promise<boolean> {\n  return new Promise(resolve => {\n    fs.exists(absFilePath, resolve);\n  });\n}\n\n/**\n * Takes the serverless.yml dir as the `serviceRoot` and the handler string that we specify in serverless.yml as `handler`\n * @example\n handlerFileDetails('/home/ubuntu/backend', 'src/index.handler');\n // {name: 'src/index.js', absPath: '/home/ubuntu/backend/src/index.js'}\n ```\n */\nexport async function handlerToFileDetails(\n  serviceRoot: string,\n  handler: string,\n): Promise<IFileNameAndPath> {\n  const lastDotIndex = handler.lastIndexOf('.');\n  if (!lastDotIndex) throw new Error('invalid handler name');\n  const fileNameWithoutExt = handler.substring(0, lastDotIndex);\n\n  const tsFileName = `${fileNameWithoutExt}.ts`;\n  const tsFilePath = path.join(serviceRoot, tsFileName);\n  const tsFileExists = await doesFileExist(tsFilePath);\n  if (tsFileExists) return { name: tsFileName, absPath: tsFilePath };\n\n  const jsFileName = `${fileNameWithoutExt}.js`;\n  const jsFilePath = path.join(serviceRoot, jsFileName);\n  return { name: jsFileName, absPath: jsFilePath };\n}\n"],"file":"utils.js"}